digit0      :   0-9

digit       :   1-9

letter      :   a-z | A-Z

otherChar   :   -ascii-

char        :   letter | otherChar

num         :   ('+' | '-')? float

float       :   (frac exp?) | (int frac? exp?)

int         :   '0' | digit+ digit0*

frac        :   '.' int

exp         :   '^' ('+' | '-')? int

str         :   quotedStr ('+' quotedStr)*

quotedStr   :   '"' (char)* '"' (',' obj)*

bool        :   'True' | 'False'

null        :   'NULL'

var         :   letter (digit | letter)*

list        :   '[' (listExpr)? ']'

listElem    :   var '[' int ']'

obj         :   var | num | str | bool | null | list

listExpr    :   obj (',' obj)*

#-------- ================ --------#

program     :   (line ENDLINE)*

ENDLINE     :   ';' '\n'

line        :   assign
            |   input
            |   output
            |   ifLine
            |   loopLine
            |   breakLine
            |   contLine

input       :   readIn var

output      :   writeOut obj

assign      :   var '=' expr

expr        :   pred (condOp expr)?

pred        :   term ( ('+' | '-') pred)?

term        :   baseExpr ( ('*' | '/' | '/.' | '%') term)?

baseExpr    :   obj
            |   '(' expr ')'

operator    :   '+' | '-' | '*' | '/' | '/.' | '%' | condOp

condOp      :   '&&' | '||' | '!=' | '==' | '<=' | '>=' | > | <

ifLine      :   if ifCond ifBody

ifCond      :   '(' expr ')'

ifBody      :   (line ENDLINE)+ (optElse)?

optElse     :   else (line ENDLINE)+

loopLine    :   while ifCond loopBody

loopBody    :   program

#-------- ================ --------#

readIn      :   'readIn'

writeOut    :   'writeOut'

breakLine   :   'break'

contLine    :   'continue'

if          :   'if'

while       :   'while'

else        :   'else'
